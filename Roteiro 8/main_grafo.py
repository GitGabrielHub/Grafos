from grafo import Grafo
import string

######################################################### DJIKSTRA ADAPTADO PARA O DRONE ###########################################################################

# grafoDrone = Grafo()
# alfabeto = list(string.ascii_uppercase)
# for letra in alfabeto:
#     grafoDrone.adicionaVertice(letra)
# for num in range(1,8):
#     grafoDrone.adicionaVertice(str(num))
#
# grafoDrone.adicionaAresta('A-B')
# grafoDrone.adicionaAresta('A-C')
# grafoDrone.adicionaAresta('A-D')
# grafoDrone.adicionaAresta('B-H')
# grafoDrone.adicionaAresta('B-I')
# grafoDrone.adicionaAresta('C-F')
# grafoDrone.adicionaAresta('D-C')
# grafoDrone.adicionaAresta('D-E')
# grafoDrone.adicionaAresta('E-F')
# grafoDrone.adicionaAresta('E-L')
# grafoDrone.adicionaAresta('F-G')
# grafoDrone.adicionaAresta('F-J')
# grafoDrone.adicionaAresta('F-K')
# grafoDrone.adicionaAresta('G-J')
# grafoDrone.adicionaAresta('G-D')
# grafoDrone.adicionaAresta('H-G')
# grafoDrone.adicionaAresta('L-M')
# grafoDrone.adicionaAresta('K-N')
# grafoDrone.adicionaAresta('J-I')
# grafoDrone.adicionaAresta('J-O')
# grafoDrone.adicionaAresta('I-P')
# grafoDrone.adicionaAresta('M-Q')
# grafoDrone.adicionaAresta('N-R')
# grafoDrone.adicionaAresta('O-5')
# grafoDrone.adicionaAresta('O-R')
# grafoDrone.adicionaAresta('O-Q')
# grafoDrone.adicionaAresta('P-T')
# grafoDrone.adicionaAresta('P-R')
# grafoDrone.adicionaAresta('Q-R')
# grafoDrone.adicionaAresta('R-5')
# grafoDrone.adicionaAresta('R-Y')
# grafoDrone.adicionaAresta('5-T')
# grafoDrone.adicionaAresta('5-V')
# grafoDrone.adicionaAresta('T-U')
# grafoDrone.adicionaAresta('Y-1')
# grafoDrone.adicionaAresta('Y-Z')
# grafoDrone.adicionaAresta('X-R')
# grafoDrone.adicionaAresta('V-X')
# grafoDrone.adicionaAresta('V-W')
# grafoDrone.adicionaAresta('V-2')
# grafoDrone.adicionaAresta('U-7')
# grafoDrone.adicionaAresta('U-W')
# grafoDrone.adicionaAresta('1-X')
# grafoDrone.adicionaAresta('1-3')
# grafoDrone.adicionaAresta('7-6')
# grafoDrone.adicionaAresta('6-3')
# grafoDrone.adicionaAresta('3-4')
# grafoDrone.adicionaAresta('3-S')
#
# print(grafoDrone)
#
# grafo = Grafo()
# grafo.adicionaVertice("A")
# grafo.adicionaVertice("B")
# grafo.adicionaVertice("C")
# grafo.adicionaVertice("D")
# grafo.adicionaVertice("E")
# grafo.adicionaVertice("F")
#
# grafo.adicionaAresta("B-A")
# grafo.adicionaAresta("A-C")
# grafo.adicionaAresta("C-E")
# grafo.adicionaAresta("B-D")
# grafo.adicionaAresta("D-E")
# grafo.adicionaAresta("A-D")
# grafo.adicionaAresta("D-B")
# grafo.adicionaAresta("B-F")
# grafo.adicionaAresta("C-F")
# grafo.adicionaAresta("F-A")
#
# print(grafo)
# print(grafoDrone.djkistra_drone("A", "S",31,5,['L','R','U','6']))

######################################## ALGORITMO DE PRIN ##################################################################

# grafoPrinTeste1 = Grafo()
# grafoPrinTeste1.adicionaVertice("A")
# grafoPrinTeste1.adicionaVertice("B")
# grafoPrinTeste1.adicionaVertice("C")
# grafoPrinTeste1.adicionaVertice("D")
# grafoPrinTeste1.adicionaVertice("E")
#
# grafoPrinTeste1.adicionaArestaComPeso("A-B", 1)
# grafoPrinTeste1.adicionaArestaComPeso("B-C", 2)
# grafoPrinTeste1.adicionaArestaComPeso("C-D", 1)
# grafoPrinTeste1.adicionaArestaComPeso("C-E", 3)
# grafoPrinTeste1.adicionaArestaComPeso("D-A", 2)
# grafoPrinTeste1.adicionaArestaComPeso("E-A", 2)
#
# print(grafoPrinTeste1)
# print(grafoPrinTeste1.spanning_tree_prim())


# grafoPrinTeste2 = Grafo()
# grafoPrinTeste2.adicionaVertice("A")
# grafoPrinTeste2.adicionaVertice("B")
# grafoPrinTeste2.adicionaVertice("C")
# grafoPrinTeste2.adicionaVertice("D")
# grafoPrinTeste2.adicionaVertice("E")
# grafoPrinTeste2.adicionaVertice("F")
# grafoPrinTeste2.adicionaVertice("G")
#
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("A-G", 1)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("A-B", 5)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("B-C", 4)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("B-E", 2)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("B-D", 3)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("G-C", 2)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("G-F", 1)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("E-F", 2)
# grafoPrinTeste2.adicionaArestaNaoDirecionadaComPeso("D-F", 2)
#
# print(grafoPrinTeste2)
# print(grafoPrinTeste2.spanning_tree_prim())


grafoPrinTeste3 = Grafo()
grafoPrinTeste3.adicionaVertice("A")
grafoPrinTeste3.adicionaVertice("B")
grafoPrinTeste3.adicionaVertice("C")
grafoPrinTeste3.adicionaVertice("D")
grafoPrinTeste3.adicionaVertice("E")
grafoPrinTeste3.adicionaVertice("F")
grafoPrinTeste3.adicionaVertice("G")
grafoPrinTeste3.adicionaVertice("H")

grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("G-F", 1)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("G-A", 4)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("G-B", 10)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("A-B", 9)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("F-H", 2)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("F-E", 2)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("F-C", 8)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("H-B", 7)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("B-C", 6)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("C-D", 8)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("C-E", 12)
grafoPrinTeste3.adicionaArestaNaoDirecionadaComPeso("E-D", 14)

print(grafoPrinTeste3)
print(grafoPrinTeste3.spanning_tree_prim())


#########################################################################################